/*
	Cassowary.net: an incremental constraint solver for .NET
	(http://lumumba.uhasselt.be/jo/projects/cassowary.net/)
	
	Copyright (C) 2005	Jo Vermeulen (jo.vermeulen@uhasselt.be)
		
	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public License
	as published by the Free Software Foundation; either version 2.1
	of	the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
	GNU Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA	 02111-1307, USA.
*/

using System.Collections;
using System.Globalization;
using Cassowary;

COMPILER Constraint

ClConstraint _constraint;
Hashtable _context = new Hashtable();

public Hashtable Context
{
  get { return _context; }
  set { _context = value; }
}

public ClConstraint Value
{
  get { return _constraint; }
  set { _constraint = value; }
}

CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'.
  specialchar = '_' + '-' + '.'.
  digit = '0'..'9'. 

TOKENS
  leq  			= "<=".
  geq  			= ">=".
  eq 			  = "=".
	altleq		= "[=".
	altgeq		= "]=".
  plus      = "+".
  minus     = "-".
  times     = "*".
  divide    = "/".
  lparen    = "(".
  rparen    = ")".

  variable  = letter {letter | digit | specialchar}.
  number    = digit {digit} ['.' {digit} ['E' ['+'|'-'] digit {digit}]].
  
IGNORE      '\r' + '\n' + '\t'
  
PRODUCTIONS

/*------------------------------------------------------------------------------------------------------------------------*/

Constraint                               (. ClLinearExpression e1, e2; bool eq = false, geq = false, leq = false; .)
=
	Expression<out e1> 
	( eq		                               (. eq = true; .)
  | geq   		                           (. geq = true; .)
  | altgeq	   		                       (. geq = true; .)
	| leq       		                       (. leq = true; .)
	| altleq	       		                   (. leq = true; .)
	) 
	Expression<out e2>                     (.
	                                          if (eq)
	                                            Value = new ClLinearEquation(e1, e2);
	                                          else if (geq)
	                                            Value = new ClLinearInequality(e1, Cl.GEQ, e2);
	                                          else if (leq)
	                                            Value = new ClLinearInequality(e1, Cl.LEQ, e2);
	                                       .)
.
/*------------------------------------------------------------------------------------------------------------------------*/
            
Expression<out ClLinearExpression e>     (. e = null; ClLinearExpression e1; .)
=
	Term<out e>
	{ plus Term<out e1>                    (. e = Cl.Plus(e, e1); .)
	| minus Term<out e1>                   (. e = Cl.Minus(e, e1); .)
	}
.

/*------------------------------------------------------------------------------------------------------------------------*/

Term<out ClLinearExpression e>           (. e = null; ClLinearExpression e1; .)
=
	Factor<out e>
	{ times Factor<out e1>                 (. e = Cl.Times(e, e1); .)
	| divide Factor<out e1>                (. e = Cl.Divide(e, e1); .)
	}
.

/*------------------------------------------------------------------------------------------------------------------------*/

Factor<out ClLinearExpression e>         (. e = null; ClDouble d; ClVariable v; bool negate = false; .)
=
	[ minus                                (. negate = true; .)
	]
	( Number<out d>                        (. e = new ClLinearExpression(d.Value); .)
	| Variable<out v>                      (. e = new ClLinearExpression(v); .)
	| lparen Expression<out e> rparen
	)                                      (.
	                                         if (negate)
	                                           e = Cl.Minus(0, e);
	                                       .)
.

/*------------------------------------------------------------------------------------------------------------------------*/

Number<out ClDouble d>
=
	number
                                           (.
                                             /* always use US style numbers (with '.' as decimal separator) */
                                             double tmpVal = double.Parse(t.val, new CultureInfo("en-US").NumberFormat);
                                             d = new ClDouble(tmpVal);
                                           .)
.

/*------------------------------------------------------------------------------------------------------------------------*/
                       
Variable<out ClVariable v>
=
	variable
                                           (.
                                             if (Context.ContainsKey(t.val))
                                             {
                                               v = (ClVariable) Context[t.val];
                                             }
                                             else
                                             {
																						 	SemErr("Undefined variable: " + t.val);
																							v = null;
                                             }
                                           .)
.

/*------------------------------------------------------------------------------------------------------------------------*/

END Constraint.
